%%% main body of the model

% simulation creation
num_doctors = 5;
days_in_month = 28; % must be 28 right now, four week period
shift_length = 8; % in hours, must divide 24
shifts_in_month = (days_in_month*24)/shift_length;
shifts_in_week = shifts_in_month/4;


%%% graph implementation

% set of time vertices. first dimension is time index (one shift), second is rank of
% each doctor (-1 if can't work), assign neutral 5 to everything initially
T = 5*ones(days_in_month*(24/shift_length),num_doctors);

% list of doctors, might not even use this
D = (1:num_doctors);


%%% doctor preferences

% prefered number of shifts per month (vector of length num_doctors) might
% not implement into algorithm
pref_num_shifts = randi(shifts_in_month,num_doctors,1);
while(sum(pref_num_shifts) < shifts_in_month)
    pref_num_shifts = randi(shifts_in_month,num_doctors,1);
end

% doctors 1 and 2 can't work weekends
for i = 1:2
    for j = 1:shifts_in_month
        for k = 1:3
            if mod(j-k,shifts_in_week) == 0 % sunday
                T(j,i) = -1;
            end
            if mod(j-k-18, shifts_in_week) == 0 % saturday
                T(j,i) = -1;
            end
        end
    end
end

% doctor 3 can't work monday to wednesday, but doctor 1 prefers these days
for i = 1:shifts_in_month
    for j = 1:9
        if mod(i-j-3,shifts_in_week) == 0
            T(i,3) = -1;
            T(i,1) = 10;
        end
    end
end

% doctor 4 only works monday and tuesday
for i = 1:shifts_in_month
    for j = 1:3 % sunday
        if mod(i-j,shifts_in_week) == 0
            T(i,4) = -1;
        end
    end
    for j = 1:12 % wed-sat
        if mod(i-j-9,shifts_in_week) == 0
            T(i,4) = -1;
        end
    end
end

% now assign random preference to some random shifts
for i = 1:shifts_in_month
    for d = 1:num_doctors
        if (rand < 0.3 && T(i,d) ~= -1) % about a third of all preferences randomize
            if rand < 0.5
                T(i,d) = -1;
            else
                T(i,d) = randi(10);
            end
        end
    end
end


%%% error checking

% check that there are no shifts that no doctor can take
for i = 1:shifts_in_month
    error = 1; % initialize as true
    for d = 1:num_doctors
        if T(i,d) ~= -1
            error = 0;
            break;
        end
    end
    if error == 1
        fprintf('Warning: no doctor can work shift number %d',i);
        break;
    end
end

% instead of building an angorithm like this, should i consider looking at
% all possible schedules (where no doctor works two shifts in a row...
% sounds like there might be a lot of them) and rank them

% potential problem: if doctors 1..3 are all available for an extended
% time, preference will just be given to doctors 1 and 2

%%% algorithm to build schedule

T_solution = zeros(shifts_in_month,1); % to store which doctor takes the shift

% initial case, don't have to worry about double shifting
[M, I] = max(T(1,:));
T_solution(1) = I(1);

for t = 2:shifts_in_month % every shift will get filled
    
    % sort the doctors by decending rank, where the doctor index is stored
    [rank,rank_index] = sort(T(t,:), 'descend'); % rank_index(1) is the highest ranked doctor
    
    for d = 1:num_doctors
        if (T_solution(t-1) ~= rank_index(d) && T(t,rank_index(d)) ~= -1) % if they didn't work the previous shift, give to max rank
            T_solution(t) = rank_index(d);
            break
        end
    end
    
    if T_solution(t) ~= 0
        continue
    end
    
    % we may still have zeros in T_solution, when the only
    % available doctor worked the previous shift
    
    % get previous timestep's information
    [prev_rank,prev_rank_index] = sort(T(t-1,:), 'descend');
    
    if sum(prev_rank == -1) == num_doctors - 1 % if no one else is is available for previous timestep
        fprintf('Warning: someone must double shift!');
        T_solution(t) = T_solution(t-1);
        
    elseif (t < 3 || T_solution(t-2) ~= prev_rank(2)) % if the second choice isn't a double shift
        T_solution(t-1) = prev_rank_index(2);
        T_solution(t) = rank_index(1);
    end
    
    
    
end

num_zeros = sum(T_solution(:) == 0)